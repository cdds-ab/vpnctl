#!/usr/bin/env bash
#
# vpnctl — manage multiple OpenVPN profiles via a YAML config.
# Supports:
#   --version                      show version information
#   -d/--debug, -v/--verbose       stream logs without tearing down on Ctrl-C
#   -k/--kill                      purge old tun* devices, routes, DNS caches & openvpn procs
#   -p/--profile <key>             select profile
#   -o/--output <file>             output path for backup (default vpn-backup.tar.gz.gpg)
#   -i/--input <file>              input path for restore  (default vpn-backup.tar.gz.gpg)
# Actions: start|up, stop|down, status, backup, restore, backup-stats, set-backup, self-update
# Requires: yq (Go-yq or python-yq), openvpn, sudo, gpg (for backup/restore), gh/curl/wget (for self-update)

set -euo pipefail

CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/vpn_config.yaml"
DEBUG=false
KILL_OLD=false
PROFILE_KEY=""
OUTPUT_FILE=""
INPUT_FILE=""
BACKUP_PATH=""
ACTION=""
CURRENT_VERSION="1.2.2"
GITHUB_REPO="cdds-ab/vpnctl"
UPDATE_CHECK_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/.vpnctl_update_check"

# ─── Parse arguments ────────────────────────────────────────────────────────
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--debug|-v|--verbose)
      DEBUG=true; shift ;;
    -k|--kill)
      KILL_OLD=true; shift ;;
    --version)
      echo "vpnctl $CURRENT_VERSION"
      exit 0 ;;
    -p|--profile)
      shift
      [[ -z "$1" || "$1" == -* ]] && { echo "❌ Missing profile after -p" >&2; exit 1; }
      PROFILE_KEY="$1"; shift ;;
    -o|--output)
      shift
      [[ -z "$1" || "$1" == -* ]] && { echo "❌ Missing file after -o/--output" >&2; exit 1; }
      OUTPUT_FILE="$1"; shift ;;
    -i|--input)
      shift
      [[ -z "$1" || "$1" == -* ]] && { echo "❌ Missing file after -i/--input" >&2; exit 1; }
      INPUT_FILE="$1"; shift ;;
    start|up|stop|down|status|backup|restore|backup-stats|self-update)
      [[ -n "$ACTION" ]] && { echo "❌ Multiple actions: $ACTION and $1" >&2; exit 1; }
      ACTION="$1"; shift ;;
    set-backup)
      [[ -n "$ACTION" ]] && { echo "❌ Multiple actions: $ACTION and $1" >&2; exit 1; }
      ACTION="$1"; shift
      [[ -z "$1" || "$1" == -* ]] && { echo "❌ Missing backup path after set-backup" >&2; exit 1; }
      BACKUP_PATH="$1"; shift ;;
    *)
      echo "❌ Unknown argument: $1" >&2
      echo "Usage: vpnctl [--version] [-d|-v] [-k] [-p <profile>] [-o <file>] [-i <file>] <start|up|stop|down|status|backup|restore|backup-stats|set-backup <path>|self-update>" >&2
      exit 1 ;;
  esac
done

# ─── Action must be set ─────────────────────────────────────────────────────
[[ -n "$ACTION" ]] || { echo "❌ No action specified." >&2; exit 1; }

# Get backup file path from config or fallback to default
get_backup_file(){
  local file_type="$1"  # "output" or "input"
  local config_file="${XDG_CONFIG_HOME:-$HOME/.config}/vpn_config.yaml"
  local default_file="vpn-backup.tar.gz.gpg"
  
  # Check if -o or -i was provided
  if [[ "$file_type" == "output" && -n "$OUTPUT_FILE" ]]; then
    echo "$OUTPUT_FILE"
    return
  elif [[ "$file_type" == "input" && -n "$INPUT_FILE" ]]; then
    echo "$INPUT_FILE"
    return
  fi
  
  # Try to get from config file
  if [[ -f "$config_file" ]]; then
    local config_backup
    if yq --version 2>&1 | grep -q 'eval'; then
      config_backup=$(yq eval -r '.backup.default_file' "$config_file" 2>/dev/null)
    else
      config_backup=$(yq '.backup.default_file' "$config_file" 2>/dev/null)
      config_backup="${config_backup%\"}"; config_backup="${config_backup#\"}"
      config_backup="${config_backup%\'}"; config_backup="${config_backup#\'}"
    fi
    
    if [[ -n "$config_backup" && "$config_backup" != "null" ]]; then
      # Expand path variables
      config_backup="${config_backup/#\~/$HOME}"
      config_backup=$(eval echo "\"$config_backup\"")
      echo "$config_backup"
      return
    fi
  fi
  
  # Fallback to default
  echo "$default_file"
}

check_for_updates(){
  # Check if we should skip update check (max once per day)
  if [[ -f "$UPDATE_CHECK_FILE" ]]; then
    local last_check
    last_check=$(stat -c %Y "$UPDATE_CHECK_FILE" 2>/dev/null || echo 0)
    local current_time
    current_time=$(date +%s)
    local day_in_seconds=86400
    
    # Skip if checked less than 24 hours ago
    if [[ $((current_time - last_check)) -lt $day_in_seconds ]]; then
      return 0
    fi
  fi
  
  # Check for latest release on GitHub - prefer gh CLI, fallback to curl/wget
  local latest_version
  if command -v gh >/dev/null 2>&1; then
    latest_version=$(gh release view --repo "$GITHUB_REPO" --json tagName --jq '.tagName | sub("^v"; "")' 2>/dev/null)
    # If gh fails (not authenticated), fall back to curl/wget
    if [[ -z "$latest_version" || "$latest_version" == "null" ]]; then
      latest_version=""
    fi
  fi
  
  # Fallback to curl if gh failed or is not available
  if [[ -z "$latest_version" ]] && command -v curl >/dev/null 2>&1; then
    latest_version=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest" \
      | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' 2>/dev/null)
  elif command -v wget >/dev/null 2>&1; then
    latest_version=$(wget -qO- "https://api.github.com/repos/$GITHUB_REPO/releases/latest" \
      | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' 2>/dev/null)
  else
    # No tools available
    return 0
  fi
  
  # Update the check timestamp
  touch "$UPDATE_CHECK_FILE" 2>/dev/null || true
  
  # Compare versions (simple string comparison for semantic versions)
  if [[ -n "$latest_version" && "$latest_version" != "$CURRENT_VERSION" ]]; then
    echo "🔄 Update available: $CURRENT_VERSION → $latest_version"
    echo "   Run 'vpnctl self-update' to update to the latest version"
    echo ""
  fi
}

self_update(){
  echo "🔄 Checking for vpnctl updates..."
  
  # Get latest release info - prefer gh CLI
  local latest_version release_notes
  if command -v gh >/dev/null 2>&1; then
    latest_version=$(gh release view --repo "$GITHUB_REPO" --json tagName --jq '.tagName | sub("^v"; "")' 2>/dev/null)
    if [[ -n "$latest_version" && "$latest_version" != "null" ]]; then
      release_notes=$(gh release view --repo "$GITHUB_REPO" --json body --jq '.body' 2>/dev/null | head -5)
    else
      latest_version=""
    fi
  fi
  
  # Fallback to curl if gh failed or is not available
  if [[ -z "$latest_version" ]] && command -v curl >/dev/null 2>&1; then
    local api_response
    api_response=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    latest_version=$(echo "$api_response" | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' 2>/dev/null)
  elif command -v wget >/dev/null 2>&1; then
    local api_response
    api_response=$(wget -qO- "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    latest_version=$(echo "$api_response" | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' 2>/dev/null)
  else
    echo "❌ Error: gh, curl, or wget required for self-update"
    echo "   Install gh CLI: https://cli.github.com/"
    exit 1
  fi
  
  if [[ -z "$latest_version" ]]; then
    echo "❌ Error: Could not fetch latest version information"
    exit 1
  fi
  
  if [[ "$latest_version" == "$CURRENT_VERSION" ]]; then
    echo "✅ Already running latest version: $CURRENT_VERSION"
    exit 0
  fi
  
  echo "📦 Updating from $CURRENT_VERSION to $latest_version..."
  
  # Show release notes if available
  if [[ -n "$release_notes" && "$release_notes" != "null" ]]; then
    echo "📋 What's new:"
    echo "$release_notes" | sed 's/^/   /'
    echo ""
  fi
  
  # Create temporary directory for download
  local temp_dir
  temp_dir=$(mktemp -d)
  trap 'rm -rf "$temp_dir"' EXIT
  
  echo "⬇️  Downloading latest version..."
  
  # Download new version - prefer gh CLI
  if command -v gh >/dev/null 2>&1; then
    gh release download --repo "$GITHUB_REPO" --pattern "vpnctl" --dir "$temp_dir" 2>/dev/null
  elif command -v curl >/dev/null 2>&1; then
    curl -sL -o "$temp_dir/vpnctl" "https://github.com/$GITHUB_REPO/releases/latest/download/vpnctl"
  else
    wget -q -O "$temp_dir/vpnctl" "https://github.com/$GITHUB_REPO/releases/latest/download/vpnctl"
  fi
  
  # Verify download
  if [[ ! -f "$temp_dir/vpnctl" ]]; then
    echo "❌ Error: Failed to download new version"
    exit 1
  fi
  
  chmod +x "$temp_dir/vpnctl"
  
  # Verify the downloaded version
  local downloaded_version
  downloaded_version=$(grep '^CURRENT_VERSION=' "$temp_dir/vpnctl" | cut -d'"' -f2 2>/dev/null || echo "unknown")
  
  if [[ "$downloaded_version" != "$latest_version" ]]; then
    echo "⚠️  Warning: Version mismatch in downloaded file (expected: $latest_version, got: $downloaded_version)"
  fi
  
  # Find current vpnctl location
  local current_vpnctl
  current_vpnctl=$(command -v vpnctl 2>/dev/null)
  
  if [[ -z "$current_vpnctl" ]]; then
    echo "❌ Error: Could not locate current vpnctl installation"
    exit 1
  fi
  
  echo "🔧 Installing new version to $current_vpnctl..."
  
  # Create backup of current version
  cp "$current_vpnctl" "$current_vpnctl.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
  
  # Install new version (requires sudo for system installations)
  if [[ -w "$(dirname "$current_vpnctl")" ]]; then
    # User installation - no sudo needed
    cp "$temp_dir/vpnctl" "$current_vpnctl"
  else
    # System installation - requires sudo
    echo "🔒 Installing to system location, sudo required..."
    sudo cp "$temp_dir/vpnctl" "$current_vpnctl"
  fi
  
  # Reset update check file to trigger immediate version check
  rm -f "$UPDATE_CHECK_FILE" 2>/dev/null || true
  
  echo "✅ Successfully updated to version $latest_version"
  echo "   Restart any running VPN connections to use the new version"
  
  # Exit to prevent executing old code after self-replacement
  exit 0
}

set_backup_path(){
  local new_path="$BACKUP_PATH"
  local config_file="${XDG_CONFIG_HOME:-$HOME/.config}/vpn_config.yaml"
  
  # Expand path variables for validation
  new_path="${new_path/#\~/$HOME}"
  new_path=$(eval echo "\"$new_path\"")
  
  echo "📁 Setting backup path to: $new_path"
  
  # Create config file if it doesn't exist
  if [[ ! -f "$config_file" ]]; then
    echo "📝 Creating new config file: $config_file"
    mkdir -p "$(dirname "$config_file")"
    cat > "$config_file" << EOF
backup:
  default_file: "$BACKUP_PATH"

vpn:
  # Add your VPN profiles here
EOF
    echo "✅ Config file created with backup path set."
    return
  fi
  
  # Check if backup section exists and update/create it
  if yq --version 2>&1 | grep -q 'eval'; then
    # Go-yq syntax
    yq eval '.backup.default_file = "'"$BACKUP_PATH"'"' -i "$config_file"
  else
    # Python-yq: convert to JSON, update with jq, convert back to YAML
    local temp_file
    temp_file=$(mktemp)
    yq -j '.' "$config_file" | jq '.backup.default_file = "'"$BACKUP_PATH"'"' | yq -y '.' > "$temp_file" && mv "$temp_file" "$config_file"
  fi
  
  echo "✅ Backup path updated in $config_file"
}

#── Functions for Backup/Restore ─────────────────────────────────────────────
backup_cfg(){
  local out
  out=$(get_backup_file "output")
  echo "🔐 Creating encrypted backup → $out"
  cd "$HOME"
  tar czpf - .config/vpn_config.yaml .vpn | \
    gpg --batch --yes --cipher-algo AES256 -c -o "$out"
  echo "✅ Backup written to $out"
}

restore_cfg(){
  local in
  in=$(get_backup_file "input")
  [[ -f "$in" ]] || { echo "❌ Backup file '$in' not found."; exit 1; }
  echo "🔓 Restoring from encrypted backup → $in"
  cd "$HOME"
  gpg --batch -d "$in" | tar xzpf -
  echo "✅ Configuration restored."
}

backup_stats(){
  local in
  in=$(get_backup_file "input")
  [[ -f "$in" ]] || { echo "❌ Backup file '$in' not found."; exit 1; }
  
  echo "📊 Backup Statistics: $in"
  echo "══════════════════════════════════════"
  
  # Get backup file info
  local backup_size backup_date
  backup_size=$(du -h "$in" 2>/dev/null | cut -f1)
  backup_date=$(stat -c %y "$in" 2>/dev/null | cut -d' ' -f1,2 | cut -d'.' -f1)
  echo "📁 Size: $backup_size"
  echo "📅 Created: $backup_date"
  echo
  
  # Extract and analyze backup content temporarily
  local temp_dir
  temp_dir=$(mktemp -d)
  trap 'rm -rf "$temp_dir"' EXIT
  
  echo "🔍 Analyzing backup content..."
  cd "$temp_dir"
  if gpg --batch --quiet -d "$in" | tar xzf - 2>/dev/null; then
    # Check if vpn_config.yaml exists in backup
    if [[ -f ".config/vpn_config.yaml" ]]; then
      echo "✅ VPN config found in backup"
      
      # Extract profile names from backup
      local backup_profiles
      if yq --version 2>&1 | grep -q 'eval'; then
        backup_profiles=$(yq eval '.vpn | keys | .[]' ".config/vpn_config.yaml" 2>/dev/null)
      else
        backup_profiles=$(yq '.vpn | keys | .[]' ".config/vpn_config.yaml" 2>/dev/null)
      fi
      
      echo "🔗 Profiles in backup:"
      if [[ -n "$backup_profiles" ]]; then
        echo "$backup_profiles" | sed 's/^/  • /' | sed 's/"//g'
        local profile_count
        profile_count=$(echo "$backup_profiles" | wc -l)
        echo "   Total: $profile_count profiles"
      else
        echo "  ❌ No profiles found"
      fi
    else
      echo "❌ No VPN config found in backup"
    fi
    
    # Check .vpn directory
    if [[ -d ".vpn" ]]; then
      echo
      echo "📂 VPN configs in backup:"
      find ".vpn" -name "*.ovpn" | sed 's|^\.vpn/||' | sed 's/^/  • /'
      local config_count
      config_count=$(find ".vpn" -name "*.ovpn" | wc -l)
      echo "   Total: $config_count .ovpn files"
    else
      echo "❌ No .vpn directory found in backup"
    fi
    
    # Compare with current configuration
    echo
    echo "🔄 Synchronization Status:"
    local current_config="$HOME/.config/vpn_config.yaml"
    if [[ -f "$current_config" ]]; then
      # Create temporary files without backup.default_file for comparison
      local temp_current temp_backup
      temp_current=$(mktemp)
      temp_backup=$(mktemp)
      trap 'rm -f "$temp_current" "$temp_backup"' EXIT
      
      # Strip backup.default_file from both configs for comparison
      if yq --version 2>&1 | grep -q 'eval'; then
        yq eval 'del(.backup.default_file)' "$current_config" > "$temp_current" 2>/dev/null || cp "$current_config" "$temp_current"
        yq eval 'del(.backup.default_file)' ".config/vpn_config.yaml" > "$temp_backup" 2>/dev/null || cp ".config/vpn_config.yaml" "$temp_backup"
      else
        yq 'del(.backup.default_file)' "$current_config" > "$temp_current" 2>/dev/null || cp "$current_config" "$temp_current"
        yq 'del(.backup.default_file)' ".config/vpn_config.yaml" > "$temp_backup" 2>/dev/null || cp ".config/vpn_config.yaml" "$temp_backup"
      fi
      
      # Compare config files (excluding backup.default_file)
      if diff -q "$temp_backup" "$temp_current" &>/dev/null; then
        echo "✅ Current config matches backup (ignoring backup path differences)"
      else
        echo "⚠️  Current config differs from backup"
        
        # Show profile differences
        local current_profiles
        if yq --version 2>&1 | grep -q 'eval'; then
          current_profiles=$(yq eval '.vpn | keys | .[]' "$current_config" 2>/dev/null | sed 's/"//g' | sort)
        else
          current_profiles=$(yq '.vpn | keys | .[]' "$current_config" 2>/dev/null | sed 's/"//g' | sort)
        fi
        
        backup_profiles=$(echo "$backup_profiles" | sed 's/"//g' | sort)
        
        # Profiles only in current config
        local only_current
        only_current=$(comm -23 <(echo "$current_profiles") <(echo "$backup_profiles"))
        if [[ -n "$only_current" ]]; then
          echo "   📝 New profiles since backup:"
          while IFS= read -r line; do
            echo "     • $line"
          done <<< "$only_current"
        fi
        
        # Profiles only in backup
        local only_backup
        only_backup=$(comm -13 <(echo "$current_profiles") <(echo "$backup_profiles"))
        if [[ -n "$only_backup" ]]; then
          echo "   🗑️  Profiles removed since backup:"
          while IFS= read -r line; do
            echo "     • $line"
          done <<< "$only_backup"
        fi
      fi
    else
      echo "❌ No current config found at $current_config"
    fi
  else
    echo "❌ Failed to decrypt/extract backup"
    exit 1
  fi
}

# ─── Exit early for backup/restore/backup-stats/set-backup ──────────────────
case "$ACTION" in
  backup)      backup_cfg; exit 0 ;;
  restore)     restore_cfg; exit 0 ;;
  backup-stats) backup_stats; exit 0 ;;
  set-backup)  set_backup_path; exit 0 ;;
  self-update) self_update ;;
esac

# ─── From here only VPN commands (start/stop/status) ─────────────────────────

# Check for updates on VPN actions (but not on self-update to avoid recursion)
case "$ACTION" in
  start|up|stop|down|status)
    check_for_updates
    ;;
esac

# Common prechecks
[[ -f "$CONFIG_FILE" ]] || { echo "❌ Config file not found: $CONFIG_FILE" >&2; exit 1; }
command -v yq &>/dev/null || { echo "❌ 'yq' not found; please install." >&2; exit 1; }

# Select first profile if none is set
if [[ -z "$PROFILE_KEY" ]]; then
  if yq --version 2>&1 | grep -q 'eval'; then
    RAW_KEY=$(yq eval -r '.vpn | keys | .[0]' "$CONFIG_FILE")
  else
    RAW_KEY=$(yq '.vpn | keys | .[0]' "$CONFIG_FILE")
  fi
  PROFILE_KEY="${RAW_KEY//\"/}"
fi

# Load and prepare path from YAML
if yq --version 2>&1 | grep -q 'eval'; then
  RAW_CONF=$(yq eval -r ".vpn.${PROFILE_KEY}.config" "$CONFIG_FILE" 2>/dev/null)
else
  RAW_CONF=$(yq ".vpn.${PROFILE_KEY}.config" "$CONFIG_FILE" 2>/dev/null)
  RAW_CONF="${RAW_CONF%\"}"; RAW_CONF="${RAW_CONF#\"}"
  RAW_CONF="${RAW_CONF%\'}"; RAW_CONF="${RAW_CONF#\'}"
fi
[[ -n "$RAW_CONF" && "$RAW_CONF" != "null" ]] || {
  echo "❌ No config for profile '$PROFILE_KEY' in $CONFIG_FILE" >&2; exit 1
}

# Normalize & expand (~, $HOME, etc.)
RAW_CONF="${RAW_CONF/#\~/$HOME}"
VPN_CONF=$(eval echo "\"$RAW_CONF\"")
[[ -f "$VPN_CONF" ]] || { echo "❌ VPN config not found: $VPN_CONF" >&2; exit 1; }

# Runtime paths
USER_ID=$(id -u)
PID_FILE="/run/user/${USER_ID}/${PROFILE_KEY}.pid"
LOG_FILE="/tmp/${PROFILE_KEY}.log"

prepare_sudo(){
  sudo -n true &>/dev/null || {
    echo "🔒 Requesting sudo credentials..."
    sudo -v || { echo "❌ sudo authentication failed." >&2; exit 1; }
  }
}

start_vpn(){
  if [[ "$KILL_OLD" == true ]]; then
    echo "🧹 Purging old tun* devices, routes, DNS caches & openvpn procs…"
    for dev in /sys/class/net/tun*; do
      [ -e "$dev" ] || continue
      dev=$(basename "$dev")
      sudo ip link delete "$dev" 2>/dev/null || true
      sudo ip route flush dev "$dev" 2>/dev/null || true
    done
    sudo ip route flush cache 2>/dev/null || true
    resolvectl flush-caches 2>/dev/null || true
    sudo pkill openvpn 2>/dev/null || true
  fi

  if [[ -f "$PID_FILE" ]] && kill -0 "$(cat "$PID_FILE")" &>/dev/null; then
    echo "🔄 '$PROFILE_KEY' already running (PID $(<"$PID_FILE"))."
    return
  fi

  prepare_sudo
  echo "🚀 Starting '$PROFILE_KEY' → $VPN_CONF"
  nohup sudo openvpn --config "$VPN_CONF" >"$LOG_FILE" 2>&1 &
  echo $! >"$PID_FILE"
  echo "✅ Started (PID $(<"$PID_FILE")). Logs at $LOG_FILE"

  if [[ "$DEBUG" == true ]]; then
    echo "--- Debug: streaming logs (Ctrl+C stops debug only) ---"
    trap 'echo "🛑 Exiting debug"; kill "$TAIL_PID" 2>/dev/null; exit 0' SIGINT
    tail -n +1 -F "$LOG_FILE" &
    TAIL_PID=$!
    wait "$TAIL_PID"
    trap - SIGINT
  fi
}

stop_vpn(){
  if [[ -f "$PID_FILE" ]]; then
    PID=$(<"$PID_FILE")
    if kill -0 "$PID" &>/dev/null; then
      echo "🛑 Stopping '$PROFILE_KEY' (PID $PID)…"
      sudo kill "$PID" && rm -f "$PID_FILE"
      echo "✅ Stopped."
    else
      echo "⚠️ Process $PID not found; removing stale PID."
      rm -f "$PID_FILE"
    fi
  else
    echo "ℹ️ '$PROFILE_KEY' is not running."
  fi
}

status_vpn(){
  if [[ -f "$PID_FILE" ]] && kill -0 "$(cat "$PID_FILE")" &>/dev/null; then
    echo "✅ '$PROFILE_KEY' is running (PID $(<"$PID_FILE"))."
  else
    echo "❌ '$PROFILE_KEY' is not running."
  fi
}

case "$ACTION" in
  start|up)   start_vpn ;;
  stop|down)  stop_vpn  ;;
  status)     status_vpn ;;
esac

