#!/usr/bin/env bash
#
# vpnctl — manage any number of VPN profiles described in YAML.
# Supports: -d/--debug or -v/--verbose, -p/--profile <key>, actions: start|up, stop|down, status
# Requires: yq (MikeFarah/yq or python-yq)

CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/vpn_config.yaml"

DEBUG=false
PROFILE_KEY=""
ACTION=""

# Parse args (order‐insensitive)
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--debug|-v|--verbose)
      DEBUG=true; shift;;
    -p|--profile)
      shift
      if [[ -z "$1" || "$1" == -* ]]; then
        echo "❌ Missing profile key after -p" >&2; exit 1
      fi
      PROFILE_KEY="$1"; shift;;
    start|up|stop|down|status)
      if [[ -n "$ACTION" ]]; then
        echo "❌ Multiple actions: '$ACTION' and '$1'" >&2; exit 1
      fi
      ACTION="$1"; shift;;
    *)
      echo "❌ Unknown argument: $1" >&2
      echo "Usage: vpnctl [-d|-v] [-p profile] <start|up|stop|down|status>" >&2
      exit 1;;
  esac
done

# Require action
if [[ -z "$ACTION" ]]; then
  echo "❌ No action specified." >&2
  echo "Usage: vpnctl [-d|-v] [-p profile] <start|up|stop|down|status>" >&2
  exit 1
fi

# Config file exists?
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "❌ Config file not found: $CONFIG_FILE" >&2
  exit 1
fi

# yq must exist
if ! command -v yq &>/dev/null; then
  echo "❌ 'yq' not found; please install." >&2
  exit 1
fi

# If no profile key was passed, pick the first one—and strip any quotes
if [[ -z "$PROFILE_KEY" ]]; then
  if yq --version 2>&1 | grep -q 'eval'; then
    RAW_KEY=$(yq eval -r '.vpn | keys | .[0]' "$CONFIG_FILE")
  else
    RAW_KEY=$(yq '.vpn | keys | .[0]' "$CONFIG_FILE")
  fi
  # remove any surrounding " characters
  PROFILE_KEY=$(echo "$RAW_KEY" | sed -e 's/^"//' -e 's/"$//')
fi

# Load raw path for this profile
if yq --version 2>&1 | grep -q 'eval'; then
  RAW_CONF=$(yq eval ".vpn.${PROFILE_KEY}.config" "$CONFIG_FILE" 2>/dev/null)
else
  RAW_CONF=$(yq ".vpn.${PROFILE_KEY}.config" "$CONFIG_FILE" 2>/dev/null)
fi

# Validate
if [[ -z "$RAW_CONF" || "$RAW_CONF" == "null" ]]; then
  echo "❌ No config for profile '$PROFILE_KEY' in $CONFIG_FILE" >&2
  exit 1
fi

# Expand ~ and $HOME
VPN_CONF=$(eval echo "$RAW_CONF")

# Paths
USER_ID=$(id -u)
PID_FILE="/run/user/${USER_ID}/${PROFILE_KEY}.pid"
LOG_FILE="/tmp/${PROFILE_KEY}.log"

# Get sudo up front
prepare_sudo(){
  if ! sudo -n true &>/dev/null; then
    echo "🔒 Requesting sudo credentials..."
    sudo -v || { echo "❌ Sudo auth failed." >&2; exit 1; }
  fi
}

start_vpn(){
  if [[ -f "$PID_FILE" ]] && kill -0 "$(cat "$PID_FILE")" &>/dev/null; then
    echo "🔄 '$PROFILE_KEY' already running (PID $(<"$PID_FILE"))."
    return
  fi
  prepare_sudo
  echo "🚀 Starting '$PROFILE_KEY' → $VPN_CONF"
  nohup sudo openvpn --config "$VPN_CONF" >"$LOG_FILE" 2>&1 &
  echo $! >"$PID_FILE"
  echo "✅ Started (PID $(<"$PID_FILE")). Logs: $LOG_FILE"
  if [[ "$DEBUG" == true ]]; then
    echo "--- Debug: tailing $LOG_FILE (Ctrl+C to stop) ---"
    tail -F "$LOG_FILE"
  fi
}

stop_vpn(){
  if [[ -f "$PID_FILE" ]]; then
    PID=$(<"$PID_FILE")
    if kill -0 "$PID" &>/dev/null; then
      echo "🛑 Stopping '$PROFILE_KEY' (PID $PID)…"
      sudo kill "$PID" && rm -f "$PID_FILE"
      echo "✅ Stopped."
    else
      echo "⚠️  No process $PID; removing stale PID." 
      rm -f "$PID_FILE"
    fi
  else
    echo "ℹ️ '$PROFILE_KEY' not running."
  fi
}

status_vpn(){
  if [[ -f "$PID_FILE" ]] && kill -0 "$(cat "$PID_FILE")" &>/dev/null; then
    echo "✅ '$PROFILE_KEY' is running (PID $(<"$PID_FILE"))."
  else
    echo "❌ '$PROFILE_KEY' is not running."
  fi
}

# Dispatch
case "$ACTION" in
  start|up)   start_vpn ;;
  stop|down)  stop_vpn  ;;
  status)     status_vpn;;
esac

