#!/usr/bin/env bash
#
# Pre-commit hook for vpnctl project
# Runs tests, linting, and optional GitHub checks before allowing commits
#
# Installation: ./scripts/install-hooks.sh
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}"

# Check if we're in the right directory
if [[ ! -f "bin/vpnctl" ]]; then
    echo -e "${RED}❌ Error: Not in vpnctl project root directory${NC}"
    exit 1
fi

# 1. Run BATS tests
echo -e "${YELLOW}🧪 Running tests...${NC}"
if ! bats tests/test_vpnctl.bats; then
    echo -e "${RED}❌ Tests failed! Commit blocked.${NC}"
    echo -e "${YELLOW}💡 Fix failing tests before committing${NC}"
    exit 1
fi
echo -e "${GREEN}✅ All tests passed${NC}"

# 2. Run shellcheck
echo -e "${YELLOW}🔍 Running shellcheck...${NC}"
if ! shellcheck bin/vpnctl; then
    echo -e "${RED}❌ Shellcheck failed! Commit blocked.${NC}"
    echo -e "${YELLOW}💡 Fix linting issues before committing${NC}"
    exit 1
fi

# Also check test scripts
if ! shellcheck tests/*.sh 2>/dev/null; then
    echo -e "${YELLOW}⚠️  Warning: Some test script linting issues found${NC}"
fi
echo -e "${GREEN}✅ Shellcheck passed${NC}"

# 3. Basic functionality test
echo -e "${YELLOW}⚡ Testing basic functionality...${NC}"
if ! ./bin/vpnctl --version >/dev/null; then
    echo -e "${RED}❌ Basic functionality test failed! Commit blocked.${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Basic functionality works${NC}"

# 4. Optional: GitHub CLI integration checks
if command -v gh >/dev/null 2>&1; then
    echo -e "${YELLOW}🐙 Running GitHub CLI checks...${NC}"
    
    # Check if we can access the repo (auth check)
    if gh repo view cdds-ab/vpnctl >/dev/null 2>&1; then
        echo -e "${GREEN}✅ GitHub CLI authenticated and repo accessible${NC}"
        
        # Optional: Check for open issues related to current changes
        # Could analyze staged files and suggest related issues
        
        # Optional: Validate commit message format
        commit_msg_file=".git/COMMIT_EDITMSG"
        if [[ -f "$commit_msg_file" ]]; then
            commit_msg=$(head -1 "$commit_msg_file")
            if [[ $commit_msg =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
                echo -e "${GREEN}✅ Commit message follows conventional format${NC}"
            else
                echo -e "${YELLOW}⚠️  Commit message doesn't follow conventional format (feat:, fix:, etc.)${NC}"
                echo -e "${YELLOW}   This is recommended for semantic versioning${NC}"
            fi
        fi
    else
        echo -e "${YELLOW}⚠️  GitHub CLI not authenticated or repo not accessible${NC}"
        echo -e "${YELLOW}   Run: gh auth login${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  GitHub CLI not installed (optional)${NC}"
    echo -e "${YELLOW}   Install with: sudo apt install gh${NC}"
fi

# 5. Check for secrets/keys (security)
echo -e "${YELLOW}🔒 Checking for potential secrets...${NC}"
if git diff --cached --name-only | xargs grep -l "password\|secret\|key\|token" 2>/dev/null; then
    echo -e "${RED}❌ Potential secrets found in staged files!${NC}"
    echo -e "${YELLOW}💡 Review staged changes for sensitive information${NC}"
    echo -e "${YELLOW}   Use 'git diff --cached' to review${NC}"
    exit 1
fi
echo -e "${GREEN}✅ No obvious secrets detected${NC}"

echo -e "${GREEN}🎉 All pre-commit checks passed! Commit allowed.${NC}"
echo ""